apply plugin: 'cpp'

model {
    platforms {
		x86_64 {
			architecture "x86_64"
		}

		binaryen {
			architecture "binaryen"
		}

		asmjs {
			architecture "asmjs"
		}
	}

	toolChains {
		gcc (Gcc) {
			target("x86_64") {				
				cppCompiler.withArguments { args -> 
					args << "-std=c++14"
					args << "-O2"
				}

				linker.withArguments { args -> 
					args << "-O2"
				}
			}
		}

		emscripten (Clang) {
			eachPlatform {
				cppCompiler.executable = 'em++'
				linker.executable = 'em++'
				staticLibArchiver.executable = 'em++'

				staticLibArchiver.withArguments { args -> 
                    args.remove '-rcs'
                    args.add(0, '-O2')
                    args.add(0, '-emit-llvm')
                    
                    for (int outputIdx = 0; outputIdx < args.size(); outputIdx++) {
                        if (args[outputIdx].endsWith('.a')) {                            
                            args[outputIdx] = args[outputIdx].replace('.a', '.bc')
                            args.add(outputIdx, '-o')
                            break;
                        }
                    }                    
				}

				cppCompiler.withArguments { args -> 
					args.add(0, '-std=c++14')
					args.add(0, '-O2')
					args.add(0, '-emit-llvm')
				}
			}

			target ("asmjs") {}

			target("binaryen") {
				staticLibArchiver.withArguments { args -> 
					args << '-s'
					args << 'BINARYEN=1'
				}

				cppCompiler.withArguments { args ->					
					args << "-s"
					args << "BINARYEN=1"
				}

				linker.withArguments { args ->					
					args << "-s"
					args << "BINARYEN=1"
				}
			}
		}
	}	

    components {
        graphics(NativeLibrarySpec) {
            targetPlatform 'asmjs'
            targetPlatform 'binaryen'
            targetPlatform 'x86_64'

            sources {
                cpp {
                    source {
                        srcDir 'src/main/cpp'
                        include '**/*.cpp'
                    }

                    exportedHeaders {
                        srcDirs '../share/src/main/include', 'src/main/include'
                        include '**/*.hpp'
                    }
                }
            }

            binaries.all {
                if (toolChain.name == 'emscripten') {                    
                    staticLibArchiver.args '-s', 'USE_WEBGL2=1', '-s', 'USE_GLFW=3'
                    cppCompiler.args '-s', 'USE_WEBGL2=1', '-s', 'USE_GLFW=3'
                    linker.args '-s', 'USE_WEBGL2=1', '-s', 'USE_GLFW=3'
                } else {
                    linker.args '-lGL', '-lglfw'
                }
            }
        }
    }
}