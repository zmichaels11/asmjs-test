model {    
    repositories {
        libs (PrebuiltLibraries) {            
            angle {
                headers.srcDir file(projectDir.path + '/../share/src/angle/include')
                binaries.withType(SharedLibraryBinary) { binary ->                    
                    if (binary.targetPlatform.operatingSystem.windows) {
                        if (binary.flavor == flavors.GLES20 || binary.flavor == flavors.GLES30) {
                            if (binary.targetPlatform.architecture == 'x86_64') {
                                sharedLibraryFile = file(projectDir.path + '/../share/bin/windows64/angle/libGLESv2.dll')
                            } else if (binary.targetPlatform.architecture == 'x86') {
                                sharedLibraryFile = file(projectDir.path + '/../share/bin/windows32/angle/libGLESv2.dll')
                            } else {
                                sharedLibraryFile = file(projectDir.path + '/../share/bin/dummy.dll')
                            }
                        } else {
                            sharedLibraryFile = file(projectDir.path + '/../share/bin/dummy.dll')
                        }
                    } else {
                        sharedLibraryFile = file(projectDir.path + '/../share/bin/dummy.so')
                    }
                }
            }

            glfw3 {
				headers.srcDir file(projectDir.path + '/../share/src/glfw3/include')
				binaries.withType(SharedLibraryBinary) { binary ->			
					if (binary.targetPlatform.operatingSystem.windows) {
                        if (binary.flavor == flavors.GL43 || binary.flavor == flavors.GL45) {					
						    sharedLibraryFile = file(projectDir.path + '/../share/bin/windows64/glfw3/glfw3.dll')
                        } else {
                            sharedLibraryFile = file(projectDir.path + '/../share/bin/dummy.dll')
                        }						
					} else {
                        sharedLibraryFile = file(projectDir.path + '/../share/bin/dummy.so')
                    }
				}
			}
        }
    }

    flavors {
        GLES20
        GLES30
        GL43
        GL45
    }

    components {
        graphics(NativeLibrarySpec) {
            targetPlatform 'asmjs'
            targetPlatform 'binaryen'
            targetPlatform 'linux64'
            targetPlatform 'windows64'
            
            sources {
                cpp {
                    lib library: 'angle'
                    lib library: 'glfw3'

                    source {
                        srcDir 'src/main/cpp'
                        include '**/*.cpp'
                    }

                    exportedHeaders {
                        srcDirs '../share/src/main/include', 'src/main/include'
                        include '**/*.hpp'
                    }
                }
            }

            binaries.all {
                if (flavor == flavors.GLES20) {
                    cppCompiler.define 'GLES20'
                } else if (flavor == flavors.GLES30) {
                    cppCompiler.define 'GLES30'
                } else if (flavor == flavors.GL43) {
                    cppCompiler.define 'GL43'
                } else if (flavor == flavors.GL45) {
                    cppCompiler.define 'GL45'
                }
            }
        }
    }
}