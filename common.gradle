apply plugin: 'cpp'

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

model {
	platforms {
		linux64 {
			operatingSystem "linux"
			architecture "x86_64"
		}

		binaryen {
			operatingSystem "webassembly"
			architecture "binaryen"
		}

		asmjs {
			operatingSystem "webassembly"
			architecture "asmjs"
		}

		windows64 {
			operatingSystem "windows"
			architecture "x86_64"
		}
	}

	toolChains {
		gcc (Gcc) {
			eachPlatform {
				cppCompiler.withArguments { args -> 
					args.add(0, "$CXX_STD")
					args.add(0, "$CXX_OPT")
					args.add(0, "-g")
				}

				linker.withArguments { args -> 
					args.add(0, "$CXX_OPT")
				}
			}

			target("linux64") {
				cCompiler.executable = 'x86_64-linux-gnu-gcc'
				cppCompiler.executable = 'x86_64-linux-gnu-g++'
				linker.executable = 'x86_64-linux-gnu-g++'
				assembler.executable = 'x86_64-linux-gnu-as'
				staticLibArchiver.executable = 'x86_64-linux-gnu-ar'
			}

			target("windows64") {
				cCompiler.executable = 'x86_64-w64-mingw32-gcc'
				cppCompiler.executable = 'x86_64-w64-mingw32-g++'
                linker.executable = 'x86_64-w64-mingw32-g++'
                assembler.executable = 'x86_64-w64-mingw32-as'
                staticLibArchiver.executable = 'x86_64-w64-mingw32-ar'
			}
		}

		emscripten (Clang) {
			eachPlatform {
				cppCompiler.executable = 'em++'
				linker.executable = 'em++'
				staticLibArchiver.executable = 'em++'

				staticLibArchiver.withArguments { args -> 
                    args.remove '-rcs'
                    args.add(0, "$CXX_OPT")
                    args.add(0, '-emit-llvm')
					

                    int outputIdx;                    
                    for (outputIdx = 0; outputIdx < args.size(); outputIdx++) {
                        if (args[outputIdx].endsWith('.a')) {                            
                            args[outputIdx] = args[outputIdx].replace('.a', '.bc')
                            args.add(outputIdx, '-o')
                            break;
                        }
                    }                    
				}

				cppCompiler.withArguments { args -> 
					args.add(0, "$CXX_STD")
					args.add(0, "$CXX_OPT")
					args.add(0, '-emit-llvm')
				}

				linker.withArguments { args -> 
					args.remove '-m64'
					args.add(0, '-O2')

					for (int i = 0; i < args.size(); i++) {
						args[i] = args[i].replace('.a', '.bc')
                        
                        if (args[i] == '-o') {
							if (!(args[i+1].endsWith('.so'))) {
								args[i+1] += '.html'
							}                            
                        }
					}
				}
			}

			target ("asmjs") {}

			target("binaryen") {
				staticLibArchiver.withArguments { args ->
					args << '-s'
					args << 'BINARYEN=1'
				}

				cppCompiler.withArguments { args ->					
					args << "-s"
					args << "BINARYEN=1"
				}

				linker.withArguments { args ->					
					args << "-s"
					args << "BINARYEN=1"
				}
			}
		}
	}	

	repositories {		
		libs (PrebuiltLibraries) {
			linux64_lmdb {
				headers.srcDir file(projectDir.path + '/liblmdb')
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(projectDir.path, '/liblmdb/build/linux64/liblmdb.a')
				}
			}

			asmjs_lmdb {
				headers.srcDir file(projectDir.path + '/liblmdb')
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(projectDir.path, '/liblmdb/build/asmjs/liblmdb.bc')
				}
			}

			binaryen_lmdb {
				headers.srcDir file(projectDir.path + '/liblmdb')
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(projectDir.path, '/liblmdb/build/binaryen/liblmdb.bc')
				}
			}

			windows64_lmdb {
				headers.srcDir file(projectDir.path + '/liblmdb/windows64/include')
				binaries.withType(SharedLibraryBinary) {
					sharedLibraryFile = file(projectDir.path + '/liblmdb/build/windows64/liblmdb.a')
				}
			}
			
			windows64_glfw3 {
				headers.srcDir file(projectDir.path + '/lib/glfw3/win64/include')
				binaries.withType(SharedLibraryBinary) {
					sharedLibraryFile = file(projectDir.path + '/lib/glfw3/win64/glfw3.dll')
				}
			}
		}
	}
}
	
