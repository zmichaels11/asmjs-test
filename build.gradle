apply plugin: 'cpp'

wrapper {
	gradleVersion = '4.3'
}

model {
	flavors {
		dummy
		test_sound
	}


	platforms {
		x86_64 {
			architecture "x86_64"
		}

		binaryen {
			architecture "binaryen"
		}

		asmjs {
			architecture "asmjs"
		}
	}

	toolChains {
		gcc (Gcc) {
			target("x86_64") {				
				cppCompiler.withArguments { args -> 
					args << "-std=c++14"
					args << "-O0"
					args << "-g"
				}

				linker.withArguments { args -> 
					args << "-O0"
					args << "-lGL"
					args << "-lglfw"
					args << "-lopenal"					
				}
			}
		}

		Emscripten (Clang) {
			eachPlatform {
				cppCompiler.executable = 'em++'
				linker.executable = 'em++'
				staticLibArchiver.executable = 'em++'

				staticLibArchiver.withArguments { args -> 
					args[0] = '-o'
					args[1] = args[1].replace('.a', '.bc')

					args << '-O2'
					args << '-emit-llvm'
					args << '-s'
					args << 'USE_GLFW=3'
					args << '-s'
					args << 'USE_WEBGL2=1'

					//System.out.println("StaticLibArchiver Args: $args")
				}

				cppCompiler.withArguments { args -> 
					args << "-std=c++14"
					args << "-O2"
					args << "-s"
					args << "USE_GLFW=3"
					args << "-s"
					args << "USE_WEBGL2=1"
					args << "-emit-llvm"

					//System.out.println("Compiler Args: $args")
				}

				linker.withArguments { args -> 
					args[1] += ".html"
					args.remove "-m64"
					args << "-O2"
					args << "-s"
					args << "USE_GLFW=3"
					args << "-s"
					args << "USE_WEBGL2=1"
					args << "--preload-file"
					args << "data"

					for (int i = 0; i < args.size(); i++) {
						args[i] = args[i].replace('.a', '.bc')
					}

					//System.out.println("Linker Args: $args")
				}
			}

			target ("asmjs")

			target("binaryen") {
				staticLibArchiver.withArguments { args -> 
					args << '-s'
					args << 'BINARYEN=1'
				}

				cppCompiler.withArguments { args ->					
					args << "-s"
					args << "BINARYEN=1"
				}

				linker.withArguments { args ->					
					args << "-s"
					args << "BINARYEN=1"
				}
			}
		}
	}	

	components {
		audio(NativeLibrarySpec) {
			targetPlatform 'asmjs'
			targetPlatform 'binaryen'
			targetPlatform 'x86_64'

			sources {
				cpp {
					source {
						srcDirs 'src/share/cpp', 'src/libaudio/cpp'
						include '**/*.cpp'
					}

					exportedHeaders {
						srcDirs 'src/share/include', 'src/libaudio/include'
						include '**/*.hpp'
					}
				}
			}
		}

		graphics(NativeLibrarySpec) {
			targetPlatform 'asmjs'
			targetPlatform 'binaryen'
			targetPlatform 'x86_64'
			
			sources {
				cpp {
					source {
						srcDirs 'src/share/cpp', 'src/libgraphics/cpp'
						include '**/*.cpp'
					}

					exportedHeaders {
						srcDirs 'src/share/include', 'src/libgraphics/include'
						include '**/*.hpp'
					}
				}
			}
		}

		ws(NativeExecutableSpec) {
			targetPlatform 'asmjs'
			targetPlatform "binaryen"
			targetPlatform "x86_64"

			sources {
				cpp {
					source {
						srcDirs 'src/share/cpp', 'src/main/cpp'
						include '**/*.cpp'
					}

					exportedHeaders {
						srcDirs 'src/share/include', 'src/main/include', 'src/libmath/include'
						include '**/*.hpp'
					}
				}
			}

			binaries.all {
				lib library: 'audio', linkage: 'static'
				lib library: 'graphics', linkage: 'static'

				if (flavor == flavors.test_sound) {
					cppCompiler.define('FN_INIT', 'test::sound::init')
					cppCompiler.define('FN_FRAME', 'test::sound::frame')
				} else {
					buildable = false
				}
			}
		}
	}
}

task emscriptenUpdate (type: Exec) {
	executable "emsdk-portable/emsdk"
	args "update"
}

task emscriptenInstall (type: Exec) {
	dependsOn emscriptenUpdate
	executable "emsdk-portable/emsdk"
	args "install", "latest"
}

task emscriptenActivate (type: Exec) {
	dependsOn emscriptenInstall
	executable "emsdk-portable/emsdk"
	args "activate", "latest"
}

task emscripten {
	dependsOn emscriptenActivate
}

task runAsmjs {
	dependsOn build		

	doLast {		
		java.awt.Desktop.getDesktop().browse(new java.io.File("build/exe/ws/asmjs/ws.html").toURI())
	}
}

task runBinaryen {
	dependsOn build

	doLast {
		java.awt.Desktop.getDesktop().browse(new java.io.File("build/exe/ws/binaryen/ws.html").toURI())
	}
}

task runNative {
	dependsOn build

	doLast {
		"build/exe/ws/x86_64/ws".execute()
	}
}

task valgrind {
	dependsOn build

	doLast {
		"valgrind build/exe/ws/x86_64/ws".execute()
	}
}