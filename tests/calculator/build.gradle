model {
    repositories {
        libs (PrebuiltLibraries) {            
            angle {
                binaries.withType(SharedLibraryBinary) { binary -> 
                    if (binary.targetPlatform.operatingSystem.windows) {
                        sharedLibraryFile = file(projectDir.path + '/../../share/bin/windows64/angle/libGLESv2.dll')
                    } else {
                        sharedLibraryFile = file(projectDir.path + '/../../share/bin/dummy.so')
                    }
                }
            }
            
            glfw3 {
				headers.srcDir file(projectDir.path + '/../../share/src/glfw3/include')
				binaries.withType(SharedLibraryBinary) { binary ->					
					if (binary.targetPlatform.operatingSystem.windows) {						
						sharedLibraryFile = file(projectDir.path + '/../../share/bin/windows64/glfw3/glfw3.dll')						
					} else {
                        sharedLibraryFile = file(projectDir.path + '/../../share/bin/dummy.so')
                    }
				}
			}

            openal_soft {
                headers.srcDir file(projectDir.path + '/../../share/src/openal-soft/include')
                binaries.withType(SharedLibraryBinary) { binary ->
                    if (binary.targetPlatform.operatingSystem.windows) {
                        sharedLibraryFile = file(projectDir.path + '/../../share/bin/windows64/openal-soft/OpenAL32.dll')
                    } else {
                        sharedLibraryFile = file(projectDir.path + '/../../share/bin/dummy.so')
                    }
                }
            }
        }
    }

    components {
        calculator(NativeExecutableSpec) {
            targetPlatform 'asmjs'
            targetPlatform 'binaryen'
            targetPlatform 'linux64'
            targetPlatform 'windows64'

            sources {
                cpp {
                    lib library: 'glfw3'
                    lib library: 'openal_soft'
                    lib library: 'angle'
                    lib project: ':libaudio', library: 'audio', linkage: 'static'                    
                    lib project: ':libengine', library: 'engine', linkage: 'static'
                    lib project: ':libgraphics', library: 'graphics', linkage: 'static'

                    source {
                        srcDir 'src/main/cpp'
                        include '**/*.cpp'
                    }

                    exportedHeaders {
                        srcDirs '../share/src/main/include', 'src/main/include'
                        include '**/*.hpp'
                    }
                }
            }

            binaries.all {                
                if (toolChain.name == 'emscripten') {
                    cppCompiler.args '-s', 'USE_WEBGL2=1', '-s', 'USE_GLFW=3'
                    linker.args '-s', 'USE_WEBGL2=1', '-s', 'USE_GLFW=3', '--preload-file', '../../data'
                } else if (targetPlatform.operatingSystem.linux) {
                    linker.args '-lopenal', '-lGL', '-lglfw'                    
                }
            }
        }
    }
}
